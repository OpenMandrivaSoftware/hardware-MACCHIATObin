#!/bin/sh
set -x
set -e

if [ "`id -u`" != 0 ]; then
	exec sudo "$0" "$@"
fi
cd $(dirname $(realpath $0))
OURDIR="$(pwd)"

ROOTFS=$(mktemp -d /tmp/aarch64-root.XXXXXX)
if [ -z "$ROOTFS" ]; then
	echo "Install or fix mktemp"
	exit 1
fi

which aarch64-linux-gnu-ld &>/dev/null || dnf -y --nogpgcheck install cross-aarch64-mandriva-linux-gnu-binutils
which make &>/dev/null || dnf -y --nogpgcheck install make glibc-devel
which bc &>/dev/null || dnf -y --nogpgcheck install bc
which gcc &>/dev/null || dnf -y --nogpgcheck install gcc
which aarch64-linux-gnu-gcc &>/dev/null || dnf -y --nogpgcheck install cross-aarch64-mandriva-linux-gnu-gcc-bootstrap
which dtc &>/dev/null || dnf -y --nogpgcheck install dtc
which qemu-static-aarch64 &>/dev/null || ( dnf -y --nogpgcheck install qemu-static-aarch64 && systemctl restart systemd-binfmt )

if [ -d kernel ]; then
	cd kernel
	git pull
	cd ..
else
	git clone --depth 1 -b hardware/MACCHIATObin/master https://github.com/OpenMandrivaSoftware/linux.git kernel
fi
KERNELDIR=$(pwd)/kernel

cd kernel
make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- mcbin_defconfig
make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- LD=aarch64-linux-gnu-ld.bfd -j$(getconf _NPROCESSORS_ONLN) Image dtbs modules
cd ..

if [ -d u-boot-marvell ]; then
	cd u-boot-marvell
	git pull
	cd ../binaries-marvell
	git pull
	cd ../atf-marvell
	git pull
	cd ../mv-ddr-marvell
	git pull
	cd ..
else
	### FIXME switch to u-boot-2017.03-armada-17.10 branch of https://github.com/MarvellEmbeddedProcessors/u-boot-marvell
	### when our patches to
	### - fix building with current toolchains
	### - enable USB 2.0 ports
	### have been accepted
	#git clone --depth 1 -b u-boot-2017.03-armada-17.10 https://github.com/MarvellEmbeddedProcessors/u-boot-marvell
	git clone --depth 1 -b 17.10-omv https://github.com/OpenMandrivaSoftware/u-boot-marvell
	git clone --depth 1 -b binaries-marvell-armada-17.10 https://github.com/MarvellEmbeddedProcessors/binaries-marvell
	### FIXME switch to atf-v1.3-armada-17.10 branch of https://github.com/MarvellEmbeddedProcessors/atf-marvell
	### when our patch to fix building with current toolchains has been accepted
	#git clone --depth 1 -b atf-v1.3-armada-17.10 https://github.com/MarvellEmbeddedProcessors/atf-marvell
	git clone --depth 1 -b atf-v1.3-armada-17.10-fixed https://github.com/OpenMandrivaSoftware/atf-marvell
	### FIXME switch to mv_ddr-armada-17.10 branch of https://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell
	### when our patch to fix building with current toolchains has been accepted
	#git clone --depth 1 -b mv_ddr-armada-17.10 https://github.com/MarvellEmbeddedProcessors/mv-ddr-marvell
	git clone --depth 1 -b mv_ddr-armada-17.10-gcc8-workaround https://github.com/OpenMandrivaSoftware/mv-ddr-marvell
	# Got to love the fact that upstream uses tools that predate dinosaurs...
	sed -i -e 's,python \$(srctree),python2 $(srctree),g' u-boot-marvell/tools/Makefile
fi
cd u-boot-marvell
make mvebu_mcbin-88f8040_defconfig CROSS_COMPILE=aarch64-linux-gnu-
make -j4 CROSS_COMPILE=aarch64-linux-gnu-
export BL33=$(pwd)/u-boot.bin
cd ..
export SCP_BL2=$(pwd)/binaries-marvell/mrvl_scp_bl2_8040.img
cd atf-marvell
make USE_COHERENT_MEM=0 LOG_LEVEL=20 MV_DDR_PATH=$(pwd)/../mv-ddr-marvell PLAT=a80x0_mcbin CROSS_COMPILE=aarch64-linux-gnu- LD=aarch64-linux-gnu-ld.bfd all fip
cp build/a80x0_mcbin/release/flash-image.bin ..
cd ..

# https://abf.openmandriva.org/platforms/cooker/products/47/product_build_lists/1812
ROOTFS_HASH="dde97cebb98711e5b474cb4f1bdb4d5fb32dec31"
[ -e rootfs-aarch64-systemd.tar.xz ] || wget -O rootfs-aarch64-systemd.tar.xz http://file-store.openmandriva.org/api/v1/file_stores/$ROOTFS_HASH

KERNEL=$(cat ${KERNELDIR}/include/config/kernel.release)

cd ${ROOTFS}
tar x --no-fflags -f ${OURDIR}/rootfs-aarch64-systemd.tar.xz
mount --bind /proc ${ROOTFS}/proc
mount --bind /sys ${ROOTFS}/sys
mount --bind /dev ${ROOTFS}/dev
mount --bind /dev/pts ${ROOTFS}/dev/pts
mount --bind /run ${ROOTFS}/run
cat ${ROOTFS}/etc/os-release >${ROOTFS}/usr/lib/os-release

# Create omv user (password omv)
echo 'omv:x:1001:1001::/home/omv:/bin/bash' >>${ROOTFS}/etc/passwd
echo 'omv:$6$rG3bQ92hkTNubV1p$5qPB9FoXBhNcSE1FOklCoEDowveAgjSf2cHYVwCENZaWtgpFQaRRRN5Ihwd8nuaKMdA1R1XouOasJ7u5dbiGt0:17302:0:99999:7:::' >>${ROOTFS}/etc/shadow
echo 'omv:x:1001:' >>${ROOTFS}/etc/group
sed -i -e 's,wheel:x:10:$,wheel:x:10:omv,' ${ROOTFS}/etc/group

# Unlock root account (also password omv)
sed -i -e 's,^root:.:,root:$6$rG3bQ92hkTNubV1p$5qPB9FoXBhNcSE1FOklCoEDowveAgjSf2cHYVwCENZaWtgpFQaRRRN5Ihwd8nuaKMdA1R1XouOasJ7u5dbiGt0:,' ${ROOTFS}/etc/shadow

cp /usr/bin/qemu-static-aarch64 ${ROOTFS}/usr/bin
mkdir -p ${ROOTFS}/boot
cd ${KERNELDIR}
for i in arch/arm64/boot/Image* arch/arm64/boot/dts/marvell/armada-8040-mcbin.dtb; do
	cp $i ${ROOTFS}/boot/$(basename $i)-${KERNEL}
	ln -s $(basename $i)-${KERNEL} ${ROOTFS}/boot/$(basename $i)
done
make modules_install INSTALL_MOD_PATH=${ROOTFS} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-

### FIXME -- remove 
cd ${ROOTFS}
git clone https://github.com/OpenMandrivaSoftware/openmandriva-updater
chroot ${ROOTFS} /bin/sh /openmandriva-updater/3.x-to-cooker.sh
chroot ${ROOTFS} /usr/bin/dnf -y clean all
### -- From here on, should be kept

chroot ${ROOTFS} /usr/bin/dnf -y --refresh --nogpgcheck --forcearch=aarch64 distro-sync
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install kernel-firmware dracut less procps-ng htop fbset iproute2 net-tools pciutils usbutils wpa_supplicant iw iproute2 net-tools wireless-tools networkmanager openssh-server dhcp-client
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install sddm x11-driver-video-ati x11-driver-video-amdgpu x11-driver-video-nouveau x11-driver-video-modesetting radeon-firmware lib64dri-drivers-radeon lib64dri-drivers-nouveau lib64dri-drivers-swrast lib64vdpau-driver-radeonsi lib64vdpau-driver-r300 lib64vdpau-driver-r600 lib64vdpau-driver-nouveau lib64vdpau-driver-softpipe
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install vim-enhanced strace
#chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install task-plasma-minimal falkon
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install basesystem-minimal distro-release-common distro-release-OpenMandriva meta-task alsa-plugins-pulseaudio alsa-utils bootsplash \
	distro-theme-OpenMandriva distro-theme-OpenMandriva-screensaver dynamic indexhtml info info-install irqbalance mailcap man mktemp mkxauth mlocate plymouth-system-theme shared-desktop-ontologies \
	sound-scripts sound-theme-freedesktop soundwrapper sudo task-x11 tmpwatch upower urw-fonts wget whois xdg-compliance xdg-user-dirs xdg-utils xrandr zip unzip \
	aria2 bash-completion bind-utils cdialog command-not-found gnupg htop lame networkmanager-openvpn open rsync sane-backends sash fonts-ttf-decoratives fonts-ttf-dejavu \
	fonts-ttf-droid fonts-ttf-liberation fonts-ttf-west_european google-crosextra-carlito-fonts google-crosextra-caladea-fonts noto-sans-fonts \
	noto-sans-cjk-fonts noto-serif-fonts noto-serif-thai x11-font-cyrillic x11-compose-cache x11-tools x11-font-type1 x11-font-misc x11-data-cursor-themes \
	task-pulseaudio alsa-plugins-pulseaudio pavucontrol-qt pulseaudio pulseaudio-module-bluetooth pulseaudio-module-gconf pulseaudio-module-x11 pulseaudio-module-zeroconf pulseaudio-utils \
	udisks2
#chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install bootloader-utils alsa-plugins
#chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install smplayer mpv
#chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install task-printing libreoffice-calc libreoffice-common libreoffice-draw libreoffice-impress libreoffice-kde4 libreoffice-math libreoffice-style-oxygen libreoffice-writer
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install extremetuxracer
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install kernel-firmware adreno-firmware dracut less procps-ng htop fbset iproute2 net-tools pciutils usbutils wpa_supplicant iw iproute2 net-tools wireless-tools networkmanager openssh-server dhcp-client
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install sddm x11-driver-video-modesetting lib64dri-drivers-freedreno
#chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install task-plasma phonon4qt5-gstreamer fcitx-qt5 showfoto enchant ffmpeg jasper nss openssl poppler-data oma-welcome
#chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install task-lxqt
chroot ${ROOTFS} /usr/bin/dnf -y --nogpgcheck --forcearch=aarch64 install vim-enhanced strace
chroot ${ROOTFS} /sbin/dracut --xz -o ifcfg -o lvm -o mdraid -o aufs-mount -f /boot/initrd-${KERNEL}.img ${KERNEL}
chroot ${ROOTFS} systemctl set-default graphical.target
chroot ${ROOTFS} systemctl enable getty@tty1.service
chroot ${ROOTFS} systemctl enable sshd.service
for i in dbus getty sshd systemd-udevd systemd-udev-trigger NetworkManager systemd-ask-password-wall systemd-logind systemd-networkd systemd-resolved systemd-update-utmp-runlevel systemd-user-sessions; do
	[ -e ${ROOTFS}/lib/systemd/system/$i.target ] && ln -sf /lib/systemd/system/$i.target ${ROOTFS}/lib/systemd/system/multi-user.target.wants/
	[ -e ${ROOTFS}/lib/systemd/system/$i.service ] && ln -sf /lib/systemd/system/$i.service ${ROOTFS}/lib/systemd/system/multi-user.target.wants/

	[ -e ${ROOTFS}/lib/systemd/system/$i.target ] && ln -sf /lib/systemd/system/$i.target ${ROOTFS}/lib/systemd/system/graphical.target.wants/
	[ -e ${ROOTFS}/lib/systemd/system/$i.service ] && ln -sf /lib/systemd/system/$i.service ${ROOTFS}/lib/systemd/system/graphical.target.wants/
done
for i in sddm; do
	[ -e ${ROOTFS}/lib/systemd/system/$i.target ] && ln -sf /lib/systemd/system/$i.target ${ROOTFS}/lib/systemd/system/graphical.target.wants/
	[ -e ${ROOTFS}/lib/systemd/system/$i.service ] && ln -sf /lib/systemd/system/$i.service ${ROOTFS}/lib/systemd/system/graphical.target.wants/
done
cat >${ROOTFS}/etc/fstab <<'EOF'
/dev/mmcblk1p1	/	ext4	defaults,noatime,discard	0	0
/dev/mmcblk1p2	/home	ext4	defaults,noatime,discard	0	1
EOF

# FIXME REMOVE BEFORE PRODUCTION BUILD -- allow root login for convenience
echo 'PermitRootLogin yes' >>${ROOTFS}/etc/ssh/sshd_config
rm ${ROOTFS}/etc/ssh/denyusers
touch ${ROOTFS}/etc/ssh/denyusers

# MACCHIATObin's bootloader doesn't seem to support initramfs properly
# Let's see if we can just built the initramfs into the kernel...
cp -f ${ROOTFS}/boot/initrd-${KERNEL}.img ${KERNELDIR}/usr/initramfs_data.cpio.gz
cd ${KERNELDIR}
make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(getconf _NPROCESSORS_ONLN) Image
for i in arch/arm64/boot/Image* arch/arm64/boot/dts/marvell/armada-8040-mcbin.dtb; do
	cp -f $i ${ROOTFS}/boot/$(basename $i)-${KERNEL}
done

cd ${OURDIR}

rm -f ${ROOTFS}/usr/bin/qemu-static-aarch64

umount ${ROOTFS}/run
umount ${ROOTFS}/dev/pts
umount ${ROOTFS}/dev
umount ${ROOTFS}/sys
umount ${ROOTFS}/proc

rm -rf ${ROOTFS}/home/*
mkdir -p ${ROOTFS}/home
cp -a ${ROOTFS}/etc/skel ${ROOTFS}/home/omv
chown 1001:1001 ${ROOTFS}/home/omv

# Just in case qemu crashes, let's not package
# its coredumps...
rm -f ${ROOTFS}/qemu*.core

cd "${ROOTFS}"
tar cf "$OURDIR"/rootfs.tar *
cd "$OURDIR"
xz -9f rootfs.tar

rm -rf ${ROOTFS}
if [ "$ABF" = "1" ]; then
	output_dir="$HOME/output"
	[ -d "$output_dir" ] || mkdir -p $output_dir
	mv rootfs.tar.xz $output_dir
	pushd kernel
	make mrproper
	popd
fi
